name: generate-schemas

on:
  pull_request:
    branches: [ main ]
#  schedule:
#    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual triggers

env:
  MIN_K8S_VERSION: "29"  # Minimum Kubernetes minor version to process

jobs:
  generate-schemas:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip

      - name: Get and process Kubernetes versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create temp directory with appropriate permissions
          TEMP_DIR=$(mktemp -d)
          chmod 777 "${TEMP_DIR}"
          trap 'sudo rm -rf "${TEMP_DIR}"' EXIT

          # Get K8s versions
          VERSIONS=$(curl -s https://api.github.com/repos/kubernetes/kubernetes/git/refs/tags | \
            jq -r '.[].ref' | \
            grep -o 'v1\.[0-9]\{2\}\.[0-9]\{1,2\}$' | \
            awk -v min=${{ env.MIN_K8S_VERSION }} 'BEGIN{FS="[.v]"} {if ($3 >= min) print $0}')

          # Function to check if release exists
          release_exists() {
            local version=$1
            gh release view "$version" --repo "${{ github.repository }}" >/dev/null 2>&1
          }

          # Define the openapi2jsonschema command
          OPENAPI2JSONSCHEMABIN="docker run -i -v ${TEMP_DIR}:/out/schemas --user "$(id -u):$(id -g)" ghcr.io/yannh/openapi2jsonschema:latest"

          # Process each version
          echo "Found versions: ${VERSIONS}"
          for K8S_VERSION in ${VERSIONS}; do
            echo "Processing version: ${K8S_VERSION}"

            # Skip if release already exists
            if release_exists "${K8S_VERSION}"; then
              echo "Release ${K8S_VERSION} already exists, skipping..."
              continue
            fi

            SCHEMA="https://raw.githubusercontent.com/kubernetes/kubernetes/${K8S_VERSION}/api/openapi-spec/swagger.json"
            PREFIX="https://kubernetesjsonschema.dev/${K8S_VERSION}/_definitions.json"

            # Generate standalone-strict schemas
            $OPENAPI2JSONSCHEMABIN -o "schemas/${K8S_VERSION}-standalone-strict" --expanded --kubernetes --stand-alone --strict "${SCHEMA}"
            $OPENAPI2JSONSCHEMABIN -o "schemas/${K8S_VERSION}-standalone-strict" --kubernetes --stand-alone --strict "${SCHEMA}"
            (cd "${TEMP_DIR}" && zip -r "kubernetes-json-schema-${K8S_VERSION}-standalone-strict.zip" "schemas/${K8S_VERSION}-standalone-strict")

            # Generate standalone schemas
            $OPENAPI2JSONSCHEMABIN -o "schemas/${K8S_VERSION}-standalone" --expanded --kubernetes --stand-alone "${SCHEMA}"
            $OPENAPI2JSONSCHEMABIN -o "schemas/${K8S_VERSION}-standalone" --kubernetes --stand-alone "${SCHEMA}"
            (cd "${TEMP_DIR}" && zip -r "kubernetes-json-schema-${K8S_VERSION}-standalone.zip" "schemas/${K8S_VERSION}-standalone")

            # Generate local schemas
            $OPENAPI2JSONSCHEMABIN -o "schemas/${K8S_VERSION}-local" --expanded --kubernetes "${SCHEMA}"
            $OPENAPI2JSONSCHEMABIN -o "schemas/${K8S_VERSION}-local" --kubernetes "${SCHEMA}"
            (cd "${TEMP_DIR}" && zip -r "kubernetes-json-schema-${K8S_VERSION}-local.zip" "schemas/${K8S_VERSION}-local")

            # Create GitHub release
            echo "Creating release for ${K8S_VERSION}..."
            gh release create "${K8S_VERSION}" \
              "${VERSION_DIR}"/*.zip \
              --title "Kubernetes ${K8S_VERSION} JSON Schema" \
              --notes "JSON Schema files for Kubernetes ${K8S_VERSION}

              - standalone-strict: Schema files with strict validation
              - standalone: Schema files with standard validation
              - local: Schema files for local validation

              Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
              --repo "${{ github.repository }}"

            # Clean up version directory
            sudo rm -rf "${VERSION_DIR}"
            echo "Completed processing ${K8S_VERSION}"

            exit 1
          done
